train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
###################################################
#                   Random Forest                 #
###################################################
library(randomForest)
Data = read.csv("heart.csv")
#################Factors##########################
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
#####Dividing the data into training Set and Testing Set#####
train.size=floor(nrow(Data)*0.7) # size of the training set
train.index= sample(1:nrow(Data), train.size,rep=F) # row Number that will be in the training set
train.set=Data[train.index,]
test.set=Data[-train.index,]
####### Algorithm #######
rf.model = randomForest(target ~ . , data = train.set, mtry = 4)
summary(rf.model)
randomForest(formula = target ~ ., data = test.set,mtry=4)
varImpPlot(rf.model)
ConfusionMatrix = function(TP,TN,FP,FN)
{
N = TP+TN+FP+FN
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
J.Index = sensitivity+specificity-1
Precision = TP/(TP+FP)
NPV = TN/(TN+FN)
Accuracy = (TP+TN)/(N)
F1.Score = (2*TP)/(2*TP+FP+FN)
Expected.Accuracy = (((TP+FN)*(TP+FP)/N)+((FP+TN)*(TN+FN)/N))/(N)
Kappa = (Accuracy-Expected.Accuracy)/(1-Expected.Accuracy)
Measure = c("Sensitivity","Specificity","J.Index","Precision","NPV", "Accuracy","F1.Score","Kappa")
Value = c(sensitivity,specificity,J.Index,Precision,NPV, Accuracy,F1.Score,Kappa)
Value = round(Value,3)
out = data.frame(Measure,Value)
return(out)
}
evaluationRF = ConfusionMatrix(127,152,13,6)
options(scipen = 999)
#Packs
library(ggplot2)
library(reshape2) #to change the data from wide to long
library(corrplot)
library(moments)
library(gmodels)
#Import Data
Data = read.csv("heart.csv",sep=",",header=T)
str(Data)
#################Factor##########################
#to change all categorical to factors
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
#Data Manipulations
#################Factor##########################
#to change all categorical to factors
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
#to change all categorical to factors
Data$target = factor(Data$target)
levels(Data$target)= c("0","1")
Data$sex =factor(Data$sex)
levels(Data$sex)= c ("0","1")
Data$cp =factor(Data$cp)
levels(Data$cp)= c ("0","1","2","3")
Data$fbs =factor(Data$fbs)
levels(Data$fbs)= c ("0","1")
Data$restecg =factor(Data$restecg)
levels(Data$restecg)= c ("0","1","2")
Data$exang =factor(Data$exang)
levels(Data$exang)= c ("0","1")
Data$slope =factor(Data$slope)
levels(Data$slope)= c ("0","1","2")
Data$NumberMV =factor(Data$NumberMV)
levels(Data$NumberMV)= c ("0","1","2","3")
Data$thal=factor(Data$thal)
levels(Data$thal)= c ("0","1","2")
# sapply : Function to return true of each column if its numeric else return false
numeric.vars = sapply(Data, is.numeric)
#Data.numeric: only numeric Col and row
Data.numeric=Data[,numeric.vars]
Data.long = melt(Data.numeric)
#melt : to make the data Vertical every column with her data and after her the other column...
#class
ft=data.frame(table(Data$target))
colnames(ft) = c("Heart Disease" , "Freq")
#add Freq Column
ft$Rel.Freq = round((ft$Freq/ sum(ft$freq))*100,2)
#Bar chart for the class
ggplot(Data,aes(x=target,fill=target,color=target)) + geom_bar(color="black")
#class
ft=data.frame(table(Data$target))
colnames(ft) = c("Heart Disease" , "Freq")
#add Freq Column
ft$Rel.Freq = round((ft$Freq/ sum(ft$freq))*100,2)
#Bar chart for the class
ggplot(Data,aes(x=target,fill=target,color=target)) + geom_bar(color="black")
#sex
ftSex=data.frame(table(Data$sex))
colnames(ftSex) = c("Sex" , "Freq")
ggplot(Data,aes(x=sex,fill=target,color=target)) + geom_bar(color="black")
